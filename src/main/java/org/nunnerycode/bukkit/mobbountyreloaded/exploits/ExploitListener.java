package org.nunnerycode.bukkit.mobbountyreloaded.exploits;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.nunnerycode.bukkit.mobbountyreloaded.MobBountyReloadedPlugin;
import org.nunnerycode.bukkit.mobbountyreloaded.events.MobBountyReloadedRewardEvent;

import java.util.HashMap;
import java.util.Map;

public final class ExploitListener implements Listener {

  private MobBountyReloadedPlugin plugin;
  private Map<String, PlayerKillData> playerKillDataMap;

  public ExploitListener(MobBountyReloadedPlugin plugin) {
    this.plugin = plugin;
    playerKillDataMap = new HashMap<>();
  }

  @EventHandler
  public void onMobBountyReloadedRewardEvent(MobBountyReloadedRewardEvent event) {
    Player player = event.getPlayer();
    PlayerKillData playerKillData;
    if (playerKillDataMap.containsKey(player.getName())) {
      playerKillData = playerKillDataMap.get(player.getName());
    } else {
      playerKillData = new PlayerKillData();
    }
    if (plugin.getIvorySettings().getBoolean("exploits.depreciative-return.enabled", false)) {
      if (event.getEntity().getType() == playerKillData.getLastKillType()) {
        playerKillData.setLastKillPercentage(
            playerKillData.getLastKillPercentage() - plugin.getIvorySettings()
                .getDouble("exploits.depreciative-return.percentage", 0.1)
        );
        event.setAmount(event.getAmount() * playerKillData.getLastKillPercentage());
      } else {
        playerKillData.setLastKillPercentage(1.0);
        playerKillData.setLastKillType(event.getEntity().getType());
      }
    }
    if (plugin.getIvorySettings().getBoolean("exploits.mob-spawner.enabled", false)) {
      int radius = plugin.getIvorySettings().getInt("exploits.mob-spawner.radius", 5);
      double percentage =
          plugin.getIvorySettings().getDouble("exploits.mob-spawner.percentage", 0.5);
      if (isMaterialWithinRadius(event.getEntity().getLocation(), Material.MOB_SPAWNER, radius)) {
        event.setAmount(event.getAmount() * percentage);
      }
    }

    playerKillDataMap.put(player.getName(), playerKillData);
  }

  private boolean isMaterialWithinRadius(Location location, Material material, int radius) {
    for (int x = -radius; x <= radius; x++) {
      for (int y = -radius; y <= radius; y++) {
        for (int z = -radius; z <= radius; z++) {
          Block b =
              new Location(location.getWorld(), location.getX() + x, location.getY() + y,
                           location.getZ() + z).getBlock();
          if (b.getType() == material) {
            return true;
          }
        }
      }
    }
    return false;
  }

}
